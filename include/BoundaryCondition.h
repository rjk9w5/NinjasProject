//////////////////////////////////////////////////////////////////////
/// @file   BoundaryCondition.h
/// @author Ryan Krattiger
/// @brief  Abstract class object for holding the information about
///         boundaries.
//////////////////////////////////////////////////////////////////////

#ifndef ABSTRACT_BOUNDARY_CONDITION_H_
#define ABSTRACT_BOUNDARY_CONDITION_H_

#include "Vector.h"

//////////////////////////////////////////////////////////////////////
/// @fn upper(const T&)
/// @brief evaluation of upper
/// @return upper value
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn lower(const T&)
/// @brief evaluation of lower
/// @return lower_bound value
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn upper_bound(const T&)
/// @brief upper bound
/// @return upper_bound value
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @fn lower_bound(const T&)
/// @brief lower bound
/// @return lower_bound value
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// @class ABoundaryCondition
/// @brief Abstract Boundary Condition class
//////////////////////////////////////////////////////////////////////
template <class T>
class ABoundaryCondition
{
  public:
    typedef T ValueType;

    virtual T upper(const T&) = 0;
    virtual T lower(const T&) = 0;
    virtual T upper_bound() = 0;
    virtual T lower_bound() = 0;
};

#endif // ABSTRACT_BOUNDARY_CONDITION_H_
